<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserInfo', 'mcenter');

/**
 * BaseUserInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $tenant_id
 * @property string $user_name
 * @property string $password
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property integer $role_id
 * @property integer $status
 * @property string $otp
 * @property timestamp $otp_upd_dt
 * @property timestamp $last_login
 * @property string $phone_number
 * @property timestamp $birthday
 * @property string $secret
 * @property string $token
 * @property Role $Role
 * 
 * @method integer   getTenantId()     Returns the current record's "tenant_id" value
 * @method string    getUserName()     Returns the current record's "user_name" value
 * @method string    getPassword()     Returns the current record's "password" value
 * @method string    getFirstName()    Returns the current record's "first_name" value
 * @method string    getLastName()     Returns the current record's "last_name" value
 * @method string    getEmail()        Returns the current record's "email" value
 * @method integer   getRoleId()       Returns the current record's "role_id" value
 * @method integer   getStatus()       Returns the current record's "status" value
 * @method string    getOtp()          Returns the current record's "otp" value
 * @method timestamp getOtpUpdDt()     Returns the current record's "otp_upd_dt" value
 * @method timestamp getLastLogin()    Returns the current record's "last_login" value
 * @method string    getPhoneNumber()  Returns the current record's "phone_number" value
 * @method timestamp getBirthday()     Returns the current record's "birthday" value
 * @method string    getSecret()       Returns the current record's "secret" value
 * @method string    getToken()        Returns the current record's "token" value
 * @method Role      getRole()         Returns the current record's "Role" value
 * @method UserInfo  setTenantId()     Sets the current record's "tenant_id" value
 * @method UserInfo  setUserName()     Sets the current record's "user_name" value
 * @method UserInfo  setPassword()     Sets the current record's "password" value
 * @method UserInfo  setFirstName()    Sets the current record's "first_name" value
 * @method UserInfo  setLastName()     Sets the current record's "last_name" value
 * @method UserInfo  setEmail()        Sets the current record's "email" value
 * @method UserInfo  setRoleId()       Sets the current record's "role_id" value
 * @method UserInfo  setStatus()       Sets the current record's "status" value
 * @method UserInfo  setOtp()          Sets the current record's "otp" value
 * @method UserInfo  setOtpUpdDt()     Sets the current record's "otp_upd_dt" value
 * @method UserInfo  setLastLogin()    Sets the current record's "last_login" value
 * @method UserInfo  setPhoneNumber()  Sets the current record's "phone_number" value
 * @method UserInfo  setBirthday()     Sets the current record's "birthday" value
 * @method UserInfo  setSecret()       Sets the current record's "secret" value
 * @method UserInfo  setToken()        Sets the current record's "token" value
 * @method UserInfo  setRole()         Sets the current record's "Role" value
 * 
 * @package    mdm-server
 * @subpackage model
 * @author     Dung Huynh
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserInfo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_info');
        $this->hasColumn('tenant_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('password', 'string', 90, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 90,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('role_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('otp', 'string', 6, array(
             'type' => 'string',
             'length' => 6,
             ));
        $this->hasColumn('otp_upd_dt', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('phone_number', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('birthday', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('secret', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('token', 'string', 500, array(
             'type' => 'string',
             'length' => 500,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Role', array(
             'local' => 'role_id',
             'foreign' => 'role_id',
             'onDelete' => 'CASCADE'));
    }
}