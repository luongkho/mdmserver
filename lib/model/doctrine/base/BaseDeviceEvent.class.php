<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DeviceEvent', 'mdmserver');

/**
 * BaseDeviceEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $device_id
 * @property string $model
 * @property string $event_type
 * @property string $event_name
 * @property integer $sent_by
 * @property integer $status
 * @property integer $manage_event_flag
 * @property string $command_data
 * @property string $command_uuid
 * @property string $sender_email
 * @property string $owner_name
 * @property string $note
 * @property DeviceInventory $DeviceInventory
 * 
 * @method integer         getDeviceId()          Returns the current record's "device_id" value
 * @method string          getModel()             Returns the current record's "model" value
 * @method string          getEventType()         Returns the current record's "event_type" value
 * @method string          getEventName()         Returns the current record's "event_name" value
 * @method integer         getSentBy()            Returns the current record's "sent_by" value
 * @method integer         getStatus()            Returns the current record's "status" value
 * @method integer         getManageEventFlag()   Returns the current record's "manage_event_flag" value
 * @method string          getCommandData()       Returns the current record's "command_data" value
 * @method string          getCommandUuid()       Returns the current record's "command_uuid" value
 * @method string          getSenderEmail()       Returns the current record's "sender_email" value
 * @method string          getOwnerName()         Returns the current record's "owner_name" value
 * @method string          getNote()              Returns the current record's "note" value
 * @method DeviceInventory getDeviceInventory()   Returns the current record's "DeviceInventory" value
 * @method DeviceEvent     setDeviceId()          Sets the current record's "device_id" value
 * @method DeviceEvent     setModel()             Sets the current record's "model" value
 * @method DeviceEvent     setEventType()         Sets the current record's "event_type" value
 * @method DeviceEvent     setEventName()         Sets the current record's "event_name" value
 * @method DeviceEvent     setSentBy()            Sets the current record's "sent_by" value
 * @method DeviceEvent     setStatus()            Sets the current record's "status" value
 * @method DeviceEvent     setManageEventFlag()   Sets the current record's "manage_event_flag" value
 * @method DeviceEvent     setCommandData()       Sets the current record's "command_data" value
 * @method DeviceEvent     setCommandUuid()       Sets the current record's "command_uuid" value
 * @method DeviceEvent     setSenderEmail()       Sets the current record's "sender_email" value
 * @method DeviceEvent     setOwnerName()         Sets the current record's "owner_name" value
 * @method DeviceEvent     setNote()              Sets the current record's "note" value
 * @method DeviceEvent     setDeviceInventory()   Sets the current record's "DeviceInventory" value
 * 
 * @package    mdm-server
 * @subpackage model
 * @author     Dung Huynh
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDeviceEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('device_event');
        $this->hasColumn('device_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('model', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             ));
        $this->hasColumn('event_type', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             ));
        $this->hasColumn('event_name', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             ));
        $this->hasColumn('sent_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('manage_event_flag', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('command_data', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('command_uuid', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('sender_email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('owner_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('note', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('DeviceInventory', array(
             'local' => 'device_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}